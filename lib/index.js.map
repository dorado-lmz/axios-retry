{"version":3,"sources":["../es/index.js"],"names":["isNetworkError","isRetryableError","isSafeRequestError","isIdempotentRequestError","isNetworkOrIdempotentRequestError","exponentialDelay","axiosRetry","namespace","error","response","Boolean","code","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","concat","status","config","indexOf","method","noDelay","retryNumber","delay","Math","pow","randomSum","random","getCurrentState","currentState","retryCount","getRequestOptions","defaultOptions","Object","assign","fixConfig","axios","defaults","agent","httpAgent","httpsAgent","retryLogic","res","iserror","Promise","reject","defaultCondition","retries","retryCondition","retryDelay","shouldRetry","timeout","lastRequestTime","lastRequestDuration","Date","now","max","resolve","setTimeout","interceptors","request","use"],"mappings":"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","file":"index.js","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\nconst namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  return !error.response\n    && Boolean(error.code) // Prevents retrying cancelled requests\n    // && error.code !== 'ECONNABORTED' // Prevents retrying timed out requests\n    && isRetryAllowed(error); // Prevents retrying unsafe errors\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isRetryableError(error) {\n  return error.code !== 'ECONNABORTED'\n    && (!error.response || (error.response.status >= 500 && error.response.status <= 599));\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * @param  {number} [retryNumber=0]\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0) {\n  const delay = Math.pow(2, retryNumber) * 100;\n  const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  const currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config[namespace]);\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n\nfunction retryLogic(axios, res, defaultOptions, iserror) {\n  const config = res.config;\n  iserror = iserror === 2;\n\n  // If we have no information to retry the request\n  if (!config) {\n    return Promise.reject(res);\n  }\n\n  var defaultCondition = iserror? isNetworkOrIdempotentRequestError: () => false;\n  const {\n    retries = 3,\n    retryCondition = defaultCondition,\n    retryDelay = noDelay\n  } = getRequestOptions(config, defaultOptions);\n\n  const currentState = getCurrentState(config);\n\n  const shouldRetry = retryCondition(res)\n    && currentState.retryCount < retries;\n\n  if (shouldRetry) {\n    currentState.retryCount++;\n    const delay = retryDelay(currentState.retryCount, res);\n\n    // Axios fails merging this configuration to the default configuration because it has an issue\n    // with circular structures: https://github.com/mzabriskie/axios/issues/370\n    fixConfig(axios, config);\n\n    if (config.timeout && currentState.lastRequestTime) {\n      const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n      // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)\n      config.timeout = Math.max((config.timeout - lastRequestDuration) - delay, 1);\n    }\n\n    return new Promise((resolve) =>\n      setTimeout(() => resolve(axios(config)), delay)\n    );\n  }\n  if (iserror) {\n    return Promise.reject(res);\n  }\n\n  return Promise.resolve(res);\n}\n\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  axios.interceptors.response.use(res => {\n    return retryLogic(axios, res, defaultOptions, 1);\n  }, error => {\n    return retryLogic(axios, error, defaultOptions, 2);\n  });\n}\n\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\n"]}